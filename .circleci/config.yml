version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.8
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment:
        type: string
      sha1:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -var sha1=<<parameters.sha1>> -auto-approve
jobs:
  check:
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Set Python Version
          command: pyenv global 3.7.0
      - run:
          name: Install AWS CLI
          command: pip3 install awscli --upgrade --user
      - run:
          name: Login to ECR
          command: aws ecr get-login --region $AWS_REGION --no-include-email | sh
      - run:
          name: Build projects
          command: make docker-build
      - run:
          name: Run tests
          command: make test
      - run:
          name: Run linting
          command: make lint
      - store_artifacts:
          path: coverage
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  development_release: &development_release
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Set Python Version
          command: pyenv global 3.7.0
      - run:
          name: Install AWS CLI
          command: pip3 install awscli --upgrade --user
      - run:
          name: Login to ECR
          command: aws ecr get-login --region $AWS_REGION --no-include-email | sh
      - run:
          name: Build new application Docker image
          command: docker build --build-arg RAILS_ENV=development --tag hackney/apps/income-api .
      - run:
          name: Tag new image for development release
          command: |
            docker tag hackney/apps/income-api:latest 364864573329.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:$CIRCLE_SHA1
            docker tag hackney/apps/income-api:latest 364864573329.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:latest
            docker tag hackney/apps/income-api:latest 364864573329.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:development
      - run:
          name: Release new image to ECR
          command: |
            docker push 364864573329.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:$CIRCLE_SHA1
            docker push 364864573329.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:latest
            docker push 364864573329.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:development
  development_release_manual:
    <<: *development_release

  staging_release: &staging_release
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Set Python Version
          command: pyenv global 3.7.0
      - run:
          name: Install AWS CLI
          command: pip3 install awscli --upgrade --user
      - run:
          name: Login to ECR
          command: aws ecr get-login --region $AWS_REGION --no-include-email | sh
      - run:
          name: Build new application Docker image
          command: docker build --build-arg RAILS_ENV=staging --tag hackney/apps/income-api .
      - run:
          name: Tag new image for staging release
          command: |
            docker tag hackney/apps/income-api:latest 087586271961.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:$CIRCLE_SHA1
            docker tag hackney/apps/income-api:latest 087586271961.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:latest
            docker tag hackney/apps/income-api:latest 087586271961.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:staging
      - run:
          name: Release new image to ECR
          command: |
            docker push 087586271961.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:$CIRCLE_SHA1
            docker push 087586271961.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:latest
            docker push 087586271961.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:staging
  staging_release_manual:
    <<: *staging_release

  production_release:
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Set Python Version
          command: pyenv global 3.7.0
      - run:
          name: Install AWS CLI
          command: pip3 install awscli --upgrade --user
      - run:
          name: Login to ECR
          command: aws ecr get-login --region $AWS_REGION --no-include-email | sh
      - run:
          name: Build new application Docker image
          command: docker build --build-arg RAILS_ENV=production --tag hackney/apps/income-api .
      - run:
          name: Tag new image for production release
          command: |
            docker tag hackney/apps/income-api:latest 282997303675.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:production
      - run:
          name: Release new image to ECR
          command: |
            docker push 282997303675.dkr.ecr.eu-west-2.amazonaws.com/hackney/apps/income-api:production

  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "development"
          sha1: $CIRCLE_SHA1
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "staging"
          sha1: $CIRCLE_SHA1
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "production"
          sha1: $CIRCLE_SHA1

workflows:
  version: 2
  continuous_delivery:
    jobs:
#      - check
      - assume-role-development:
          context: api-assume-role-housing-development-context
#          requires:
#            - check
          filters:
            branches:
              only: development
      - development_release:
          context: api-assume-role-housing-development-context
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - terraform-init-and-apply-to-development:
          context: api-assume-role-housing-development-context
          requires:
            - development_release
          filters:
            branches:
              only: development
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
#          requires:
#            - check
          filters:
            branches:
              only: master
      - staging_release:
          context: api-assume-role-housing-staging-context
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-staging:
          context: api-assume-role-housing-staging-context
          requires:
            - staging_release
          filters:
            branches:
              only: master
      - permit_production_release:
          type: approval
          requires:
            - terraform-init-and-apply-to-staging
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
            - permit_production_release
          filters:
            branches:
              only: master
      - production_release:
          context: api-assume-role-housing-production-context
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-production:
          context: api-assume-role-housing-production-context
          requires:
            - production_release
          filters:
            branches:
              only: master
